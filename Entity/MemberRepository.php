<?php

namespace Unifik\SystemBundle\Entity;

use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\DBAL\Query\QueryBuilder;
use Unifik\SystemBundle\Lib\BaseEntityRepository;

/**
 * MemberRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MemberRepository extends BaseEntityRepository implements UserProviderInterface
{
    /**
     * Load user by username
     *
     * @param string $username The Username
     *
     * @return object
     */
    public function loadUserByUsername($username)
    {
        return $this->findOneBy(array('email' => $username, 'active' => 1));
    }

    /**
     * Refresh User
     *
     * @param UserInterface $user The User Interface
     *
     * @throws UnsupportedUserException
     *
     * @return object
     */
    public function refreshUser(UserInterface $user)
    {
        if (!$user instanceof Member) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', get_class($user)));
        }

        return $this->loadUserByUsername($user->getUsername());
    }

    /**
     * Supports Class
     *
     * @param string $class The class
     *
     * @return boolean
     */
    public function supportsClass($class)
    {
        return $class === 'Unifik\SystemBundle\Entity\Member';
    }

    /**
     * @param $userId
     * @param $saltedHash
     * @param bool $checkActive
     *
     * @return null|object
     */
    public function findByIdAndHash($userId, $saltedHash, $checkActive = true)
    {
        if ($checkActive) {
            $user = $this->findOneBy(array(
                'id' => $userId,
                'active' => true
            ));
        } else {
            $user = $this->find($userId);
        }

        if ($user) {
            if ($saltedHash == $user->getSaltedHash()) {
                return $user;
            }
        }

        return null;
    }

    /**
     * @param $userId
     * @param $saltedHash
     * @param bool $checkActive
     *
     * @return null|object
     */
    public function findByTokenAndResetHash($token, $resetHash, $checkActive = true)
    {
        if ($checkActive) {
            $user = $this->findOneBy(array(
                'token' => $token,
                'active' => true
            ));
        } else {
            $user = $this->findOneBy(array(
                'token' => $token
            ));
        }

        if ($user) {
            if ($resetHash == $user->getResetHash()) {
                return $user;
            }
        }

        return null;
    }

    /**
     * Find users that have the specified role
     *
     * @param Role $role
     *
     * @return ArrayCollection|QueryBuilder
     */
    public function findByRole($role)
    {
        // Tous les membres ont le même rôle, ROLE_MEMBER
        return $this->findAll();
    }
}
